package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"echo-graphql-jwt/database"
	"echo-graphql-jwt/models"
	model "echo-graphql-jwt/models/graph"
	"echo-graphql-jwt/utils"
	"fmt"
	"github.com/labstack/echo/v4"
	"golang.org/x/crypto/bcrypt"
	"net/http"
	"strconv"
	"time"
)

func (r *mutationResolver) Register(ctx context.Context, name string, email string, password string) (*model.AuthResponse, error) {
	user := models.DBUser{
		Name:     name,
		Email:    email,
		Password: password,
	}

	if isUserRegistered(&models.DBUser{}, user.Email) {
		return nil, fmt.Errorf("user already exists")
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}
	user.Password = string(hash)

	if err := database.DB.Create(&user).Error; err != nil {
		return nil, err
	}

	token := utils.GenerateToken(user.ID)
	return &model.AuthResponse{
		Token: token,
		User:  convertToGraphUser(&user),
	}, nil
}

func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthResponse, error) {
	user := models.DBUser{
		Email:    email,
		Password: password,
	}

	authUser := models.DBUser{}
	if !isUserRegistered(&authUser, user.Email) {
		return nil, fmt.Errorf("user does not exist")
	}

	if err := bcrypt.CompareHashAndPassword([]byte(authUser.Password), []byte(user.Password)); err != nil {
		if err == bcrypt.ErrMismatchedHashAndPassword {
			return nil, fmt.Errorf("passwords do not match")
		}
		return nil, err
	}

	token := utils.GenerateToken(authUser.ID)

	// gqlgen のコンテキストから Echo のコンテキストを取得します
	ec, ok := ctx.Value(utils.EchoContextKey).(echo.Context)
	if !ok {
		return nil, fmt.Errorf("could not retrieve echo context")
	}

	cookie := new(http.Cookie)
	cookie.Name = "token"
	cookie.Value = token
	cookie.Expires = time.Now().Add(time.Hour * 24)
	cookie.Path = "/"
	cookie.HttpOnly = true
	ec.SetCookie(cookie)

	return &model.AuthResponse{
		Token: token,
		User:  convertToGraphUser(&authUser),
	}, nil
}

func isUserRegistered(user *models.DBUser, email string) bool {
	result := database.DB.Where("email", email).Limit(1).Find(&user)
	if result.RowsAffected == 0 {
		return false
	}
	return true
}

func convertToGraphUser(dbUser *models.DBUser) *model.User {
	return &model.User{
		ID:    strconv.Itoa(int(dbUser.ID)), // Convert uint to string
		Email: dbUser.Email,
	}
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	post := model.Post{
		ID:      input.ID,
		Title:   input.Title,
		Content: input.Content,
	}

	if err := r.DB.Create(&post).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input model.UpdatePostInput) (*model.Post, error) {
	post := model.Post{}

	if err := r.DB.First(&post, input.ID).Error; err != nil {
		return nil, err
	}

	post.Title = *input.Title
	post.Content = *input.Content

	if err := r.DB.Updates(&post).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, input model.DeletePostInput) (*model.Post, error) {
	post := model.Post{}

	if err := r.DB.First(&post, input.ID).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&post).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post := model.Post{}

	if err := r.DB.First(&post, id).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts := []*model.Post{}

	if err := r.DB.Find(&posts).Error; err != nil {
		return nil, err
	}

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
